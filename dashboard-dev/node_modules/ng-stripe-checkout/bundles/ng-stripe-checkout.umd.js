(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	(factory((global.ng = global.ng || {}, global.ng.stripe = global.ng.stripe || {}, global.ng.stripe.checkout = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

var StripeCheckoutHandler = /** @class */ (function () {
    /**
     * Constructor configures the Stripe Checkout handler with given config options.
     * @param {IStripeCheckoutConfig} config
     */
    function StripeCheckoutHandler(config) {
        this.stripeCheckout = StripeCheckout.configure(config);
    }
    /**
     * Open the Stripe Checkout window for this handler.
     * @param {IStripeCheckoutOptions} options Options override initial config.
     */
    StripeCheckoutHandler.prototype.open = function (options) {
        this.stripeCheckout.open(options);
    };
    /**
     * Close the currently open Stripe Checkout window if any.
     */
    StripeCheckoutHandler.prototype.close = function () {
        this.stripeCheckout.close();
    };
    return StripeCheckoutHandler;
}());

var StripeCheckoutLoader = /** @class */ (function () {
    function StripeCheckoutLoader() {
    }
    /**
     * Create a Stripe Checkout instance as soon as Stripe has loaded.
     * @param {IStripeCheckoutConfig} config
     * @returns {Promise<StripeCheckoutHandler>}
     */
    StripeCheckoutLoader.prototype.createHandler = function (config) {
        return this.load().then(function () {
            return new StripeCheckoutHandler(config);
        });
    };
    /**
     * Load or wait for the Stripe checkout library to load.
     * @returns {Promise<void>}
     */
    StripeCheckoutLoader.prototype.load = function () {
        if (!this.loaded) {
            // No cached Promise exist, so we have to load checkout.js.
            this.loaded = new Promise(function (resolve, reject) {
                // Create script element.
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.src = 'https://checkout.stripe.com/checkout.js';
                script.onerror = function (e) { return reject(e); };
                if (script.readyState) {
                    script.onreadystatechange = function () {
                        if (script.readyState === "loaded" || script.readyState === "complete") {
                            script.onreadystatechange = null;
                            resolve();
                        }
                    };
                }
                else {
                    script.onload = function () {
                        resolve();
                    };
                }
                document.getElementsByTagName('body')[0].appendChild(script);
            });
        }
        // Return cached Promise.
        return this.loaded;
    };
    StripeCheckoutLoader.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    StripeCheckoutLoader.ctorParameters = function () { return []; };
    return StripeCheckoutLoader;
}());

var StripeCheckoutModule = /** @class */ (function () {
    function StripeCheckoutModule() {
    }
    StripeCheckoutModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: [
                        StripeCheckoutLoader,
                    ],
                },] },
    ];
    /** @nocollapse */
    StripeCheckoutModule.ctorParameters = function () { return []; };
    return StripeCheckoutModule;
}());

exports.StripeCheckoutModule = StripeCheckoutModule;
exports.StripeCheckoutLoader = StripeCheckoutLoader;
exports.StripeCheckoutHandler = StripeCheckoutHandler;

Object.defineProperty(exports, '__esModule', { value: true });

})));
