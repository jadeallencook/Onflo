{"version":3,"sources":["../../src/loader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,qBAAA,EAAsB,MAAO,WAAA,CAAY;AAIlD;IAAA;IAqDA,CAAC;IAjDC;;;;OAIG;IACI,4CAAa,GAApB,UAAqB,MAA6B;QAChD,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;YACtB,MAAM,CAAC,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACI,mCAAI,GAAX;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,2DAA2D;YAC3D,IAAI,CAAC,MAAM,GAAG,IAAI,OAAO,CAAO,UAAC,OAAO,EAAE,MAAM;gBAC9C,yBAAyB;gBACzB,IAAI,MAAM,GAAQ,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBACnD,MAAM,CAAC,IAAI,GAAG,iBAAiB,CAAC;gBAChC,MAAM,CAAC,GAAG,GAAG,yCAAyC,CAAC;gBACvD,MAAM,CAAC,OAAO,GAAG,UAAC,CAAM,IAAK,OAAA,MAAM,CAAC,CAAC,CAAC,EAAT,CAAS,CAAC;gBACvC,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;oBACtB,MAAM,CAAC,kBAAkB,GAAG;wBAC1B,EAAE,CAAC,CAAC,MAAM,CAAC,UAAU,KAAK,QAAQ,IAAI,MAAM,CAAC,UAAU,KAAK,UAAU,CAAC,CAAC,CAAC;4BACvE,MAAM,CAAC,kBAAkB,GAAG,IAAI,CAAC;4BACjC,OAAO,EAAE,CAAC;wBACZ,CAAC;oBACH,CAAC,CAAC;gBACJ,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,MAAM,GAAG;wBACd,OAAO,EAAE,CAAC;oBACZ,CAAC,CAAC;gBACJ,CAAC;gBACD,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;QACL,CAAC;QAED,yBAAyB;QACzB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IACI,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,mCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,2BAAC;CArDD,AAqDC,IAAA;SArDY,oBAAoB","file":"loader.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { StripeCheckoutHandler } from './handler';\nimport { IStripeCheckoutConfig } from './config.model';\n\n\nexport class StripeCheckoutLoader {\n\n  private loaded: Promise<void>;\n\n  /**\n   * Create a Stripe Checkout instance as soon as Stripe has loaded.\n   * @param {IStripeCheckoutConfig} config\n   * @returns {Promise<StripeCheckoutHandler>}\n   */\n  public createHandler(config: IStripeCheckoutConfig): Promise<StripeCheckoutHandler> {\n    return this.load().then(() => {\n      return new StripeCheckoutHandler(config);\n    });\n  }\n\n  /**\n   * Load or wait for the Stripe checkout library to load.\n   * @returns {Promise<void>}\n   */\n  public load(): Promise<void> {\n    if (!this.loaded) {\n      // No cached Promise exist, so we have to load checkout.js.\n      this.loaded = new Promise<void>((resolve, reject) => {\n        // Create script element.\n        let script: any = document.createElement('script');\n        script.type = 'text/javascript';\n        script.src = 'https://checkout.stripe.com/checkout.js';\n        script.onerror = (e: any) => reject(e);\n        if (script.readyState) {  // IE fallback.\n          script.onreadystatechange = () => {\n            if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n              script.onreadystatechange = null;\n              resolve();\n            }\n          };\n        } else {  // Other browsers.\n          script.onload = () => {\n            resolve();\n          };\n        }\n        document.getElementsByTagName('body')[0].appendChild(script);\n      });\n    }\n\n    // Return cached Promise.\n    return this.loaded;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}