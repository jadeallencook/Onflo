{"version":3,"sources":["../../src/handler.ts"],"names":[],"mappings":"AAIA;IAOE;;;OAGG;IACH,+BAAY,MAA6B;QACvC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACzD,CAAC;IAED;;;OAGG;IACI,oCAAI,GAAX,UAAY,OAA+B;QACzC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACI,qCAAK,GAAZ;QACE,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,CAAC;IAC9B,CAAC;IAEH,4BAAC;AAAD,CA9BA,AA8BC,IAAA","file":"handler.js","sourceRoot":"","sourcesContent":["import { IStripeCheckoutConfig, IStripeCheckoutOptions } from './config.model';\n\ndeclare let StripeCheckout: any;\n\nexport class StripeCheckoutHandler {\n\n  /**\n   * Holds the Stripe Checkout instance.\n   */\n  private stripeCheckout: any;\n\n  /**\n   * Constructor configures the Stripe Checkout handler with given config options.\n   * @param {IStripeCheckoutConfig} config\n   */\n  constructor(config: IStripeCheckoutConfig) {\n    this.stripeCheckout = StripeCheckout.configure(config);\n  }\n\n  /**\n   * Open the Stripe Checkout window for this handler.\n   * @param {IStripeCheckoutOptions} options Options override initial config.\n   */\n  public open(options: IStripeCheckoutOptions): void {\n    this.stripeCheckout.open(options);\n  }\n\n  /**\n   * Close the currently open Stripe Checkout window if any.\n   */\n  public close(): void {\n    this.stripeCheckout.close();\n  }\n\n}\n"]}